## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
#     - myRegistryKeySecretName

## @section Common parameters

## @param nameOverride String to partially override nginx.fullname template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override nginx.fullname template
##
fullnameOverride: ""
## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
##
kubeVersion: ""
## @param clusterDomain Kubernetes Cluster Domain
##
clusterDomain: cluster.local
## @param extraDeploy Extra objects to deploy (value evaluated as a template)
##
extraDeploy: []
## @param commonLabels Add labels to all the deployed resources
##
commonLabels: {}
## @param commonAnnotations Add annotations to all the deployed resources
##
commonAnnotations: {}

# Default values for yapi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

statefulset:
  enabled: true

## By default deploymentStrategy is set to rollingUpdate with maxSurge of 25% and maxUnavailable of 25% .
## You can change type to `Recreate` or can uncomment `rollingUpdate` specification and adjust them to your usage.
deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 25%
  #   maxUnavailable: 25%
  # type: RollingUpdate

# 副本个数
replicaCount: 3

# 容器image及tag
image:
  registry: docker.io
  repository: nacos/nacos-server
  tag: v2.0.4
  pullPolicy: IfNotPresent  # IfNotPresent: 有则不拉（减少流量和操作步骤），Always: 不管tag总拉（适合tag不变时更新）
  pullSecrets: []

service:
  type: ClusterIP  # 一般不用修改
  ingressPort: 8848
  ports:
    http:
      port: 8848  # Service port number for client-a port.
      protocol: TCP  # Service port protocol for client-a port.

## env set
## ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env:
  - name: PREFER_HOST_MODE
    value: "hostname"
  # - name: NACOS_SERVER_PORT
  #   value: "8848"

## command set
startCommand: []
#  - "java -Xdebug -Xnoagent -Djava.compiler=NONE"
#  - "-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n"
#  - "-Djava.security.egd=file:/dev/urandom"
#  - "-jar /test.jar"
#  - "-Duser.timezone=GMT+08"

## Enable configmap and add data in configmap
config:
  enabled: false
  mountPath: /conf
  data: {}

## To use an additional secret, set enable to true and add data
secret:
  enabled: false
  mountPath: /etc/secret-volume
  subPath: ""
  readOnly: true
  data: {}

## liveness and readiness
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
healthCheck:
  enabled: true
  type: http  # http/tcp
  port: http  # 上面的端口名或端口
  readinessPath: '/nacos/v1/console/health/readiness'  # http时必须设置
  livenessPath: '/nacos/v1/console/health/liveness'  # http时必须设置
  livenessInitialDelaySeconds: 60  # 初始延迟秒数
  livenessPeriodSeconds: 5  # 检测周期，默认值5，最小为1
  readinessInitialDelaySeconds: 60  # 初始延迟秒数
  readinessPeriodSeconds: 5   # 检测周期，默认值5，最小为1

resources:
  # 容器资源设置
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 500m
  #   memory: 2Gi

## Node labels and tolerations for pod assignment
### ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
### ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
labels: {}
podAnnotations:
  pod.alpha.kubernetes.io/initialized: "true"
nodeSelector: {}
tolerations: []
affinity: {}
annotations: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistentVolume:   # 是否存储持久化
  enabled: false
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
  ##   Azure, standard on GKE, AWS & OpenStack)
  ##
  storageClass: "-"
  accessMode: ReadWriteOnce
  annotations: {}
    # helm.sh/resource-policy: keep
  size: 5Gi  # 大小
  existingClaim: {}  # 使用已存在的pvc
  mountPaths:
    - mountPath: /home/nacos/plugins
      name: data-storage
      subPath: plugins
    - mountPath: /home/nacos/data
      name: data-storage
      subPath: data
    - mountPath: /home/nacos/logs
      name: data-storage
      subPath: logs

ingress:  # 是否使用nginx暴露域名或端口
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ingressClassName: ""
  path: /nacos
  pathType: ImplementationSpecific
  hosts:
    - nacos.example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

datasourcePlatform: mysql

mysql:
  # if enabled set "false", fill the connection informations in "external" section
  # init containers will import the flow sql file into mysql db.
  # https://raw.githubusercontent.com/alibaba/nacos/${version}/distribution/conf/schema.sql
  # https://raw.githubusercontent.com/alibaba/nacos/${version}/distribution/conf/nacos-mysql.sql
  enabled: true
  external:
    mysqlMasterHost: "mysql_master_host"
    mysqlDatabase: "nacos"
    mysqlMasterPort: "3306"
    mysqlMasterUser: "nacos"
    mysqlMasterPassword: "nacos"
    mysqlSlaveHost: "mysql_slave_host"
    mysqlSlavePort: "3306"

  architecture: replication
  auth:
    rootPassword: "nacos"
    database: "nacos"
    username: "nacos"
    password: "nacos"
    replicationUser: "replicator"
    replicationPassword: "replicator"

  primary:
    persistence:
      enabled: false
      storageClass: "-"
      mountPath: /bitnami/mysql
      annotations: {}
      accessModes:
      - ReadWriteOnce
      size: 8Gi

    configuration: |-
      [mysqld]
      skip_ssl
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      default-time_zone = '+8:00'
      character-set-server=utf8mb4
      collation-server = utf8mb4_unicode_ci

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

  secondary:
    replicaCount: 1
    persistence:
      enabled: false
      storageClass: "-"
      mountPath: /bitnami/mysql
      annotations: {}
      accessModes:
      - ReadWriteOnce
      size: 8Gi

    configuration: |-
      [mysqld]
      skip_ssl
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      default-time_zone = '+8:00'
      character-set-server=utf8mb4
      collation-server = utf8mb4_unicode_ci

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

initDB:
  enabled: true
  image:
    registry: docker.io
    repository: ygqygq2/mysql-exec-sql
    tag: latest
    pullPolicy: IfNotPresent

## Uncomment and modify this to run a command after starting the core container.
## ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/bash","/pre-stop.sh"]
  # postStart:
  #   exec:
  #     command: ["/bin/bash","/post-start.sh"]

## Deployment additional volumes.
deployment:
  additionalVolumes: []

## init containers
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## Add init containers. e.g. to be used to give specific permissions for data
## Add your own init container or uncomment and modify the given example.
initContainers: {}
#  - name: fmp-volume-permission
#    image: busybox
#    imagePullPolicy: IfNotPresent
#    command: ['chown','-R', '200', '/extra-data']
#    volumeMounts:
#      - name: extra-data
#        mountPath: /extra-data

## Prometheus Exporter / Metrics
##
metrics:
  enabled: false
  image:
    registry: docker.io
    repository:
    tag:
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    pullSecrets: []
    #  - myRegistrKeySecretName
## Metrics exporter pod Annotation and Labels
  podAnnotations: {}
#     prometheus.io/scrape: "true"
#     prometheus.io/port: "9113"
#     ## Metrics exporter resource requests and limits
#     ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
#     ##
#   # resources: {}

additionalContainers: {}
## Additional containers to be added to the core pod.
#  - name: my-sidecar
#    image: nginx:latest
#  - name: lemonldap-ng-controller
#    image: lemonldapng/lemonldap-ng-controller:0.2.0
#    args:
#      - /lemonldap-ng-controller
#      - --alsologtostderr
#      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
#    env:
#      - name: POD_NAME
#        valueFrom:
#          fieldRef:
#            fieldPath: metadata.name
#      - name: POD_NAMESPACE
#        valueFrom:
#          fieldRef:
#            fieldPath: metadata.namespace
#    volumeMounts:
#    - name: copy-portal-skins
#      mountPath: /srv/var/lib/lemonldap-ng/portal/skins
